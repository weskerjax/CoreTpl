@{
	ViewBag.Title = "使用者列表";
	string tableListId = "UserList";

	Pagination<UserDomain> pagination = ViewBag.Pagination;
	IHtmlHelper<UserDomain> pageHtml = Html.PropertyHelper(pagination);

	bool canEdit = User.AnyAct(ACT.STK_UserSetting);

}

@section Styles {
}


@section Scripts {
}


<div class="page-header" ext-horizontal-fix="">
	<h1>@ViewBag.Title</h1>
</div>


@using (Html.BeginForm(null, null, FormMethod.Get, new { id = "SearchForm", @class = "well btn-toolbar", ext_horizontal_fix = "" }))
{
	<div class="toolbar-left">
		@if (canEdit)
		{ <a class="btn btn-success btn-sm" href="@Url.Action("Create")"><i class="fa fa-plus fa-lg"></i> 新增</a> }
		else
		{ <b class="btn btn-success btn-sm disabled" title="權限不足"><i class="fa fa-plus fa-lg"></i> 新增</b> }
	</div>

	<div class="toolbar-left input-group input-group-sm" style="width: 300px;">
		@Html.BsTextBox("keyword", null, new { placeholder = "關鍵字" })
		<div class="input-group-btn">
			<button type="submit" class="btn btn-primary btn-sm"><i class="fa fa-search fa-lg"></i> 搜尋</button>
		</div>
	</div>

	<div class="toolbar-left hidden-xs hidden-sm">		
        @await Html.OrderableBtn(tableListId)
		@await Html.SortBuilderBtn(tableListId)
	</div>

	@await Html.PageSizeChange(pagination)
}



<div id="@tableListId">
	<table class="table table-striped table-bordered table-condensed table-nowrap table-hover">
		<thead ext-table-fix="">
			<tr class="head">
				<th class="min"></th>
				<th class="min"></th>
				<th class="Account min">@pageHtml.PagerSortFor(x => x.Account)</th>
				<th class="UserName min">@pageHtml.PagerSortFor(x => x.UserName)</th>
				<th class="ExtensionNum min">@pageHtml.PagerSortFor(x => x.ExtensionNum)</th>
				<th class="UserTitle min">@pageHtml.PagerSortFor(x => x.UserTitle)</th>
				<th class="Department min">@pageHtml.PagerSortFor(x => x.Department)</th>
				<th class="Email min">@pageHtml.PagerSortFor(x => x.Email)</th>
				<th class="RemarkText">@pageHtml.PagerSortFor(x => x.RemarkText)</th>
				<th class="RoleIds">@pageHtml.DisplayNameFor(x => x.RoleIds)</th>
				<th class="Status min">@pageHtml.PagerSortFor(x => x.UseStatus)</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var row in pagination.List)
			{
			<tr>
				<td class="min">
					@{ string editUrl = Url.Action("Edit", new { row.UserId }); }
					@if (canEdit)
					{ <a class="btn btn-warning btn-xs btn-icon" href="@editUrl"><i class="fa fa-pencil fa-lg"></i></a> }
					else
					{ <b class="btn btn-warning btn-xs btn-icon disabled" title="權限不足"><i class="fa fa-pencil fa-lg"></i></b> }
				</td>
				<td class="min">
					@{ string setPasswordUrl = Url.Action("SetPassword", new { row.UserId }); }
					@if (canEdit)
					{ <a class="btn btn-danger btn-xs btn-icon" href="@setPasswordUrl" target="dialog" title="設定密碼"><i class="fa fa-key fa-lg"></i></a> }
					else
					{ <b class="btn btn-danger btn-xs btn-icon disabled" title="設定密碼-權限不足"><i class="fa fa-key fa-lg"></i></b> }
				</td>
				<td class="Account">@row.Account</td>
				<td class="UserName">@row.UserName</td>
				<td class="ExtensionNum">@row.ExtensionNum</td>
				<td class="UserTitle">@row.UserTitle</td>
				<td class="Department">@row.Department</td>
				<td class="Email">@row.Email</td>
				<td class="RemarkText auto">@row.RemarkText</td>
				<td class="RoleIds mark-tag ">@Html.ShowItem(row.RoleIds, Items.RoleName)</td>
				<td class="Status mark-label min">@Html.ShowItem(row.UseStatus)</td>
			</tr>
			}
		</tbody>
	</table>

	@await Html.PageEmptyAlert(pagination)
</div>



<div class="text-center" ext-horizontal-fix="">
	<ul class="pagination pagination-sm">@Html.PagerLinks(pagination)</ul>
</div>
