// <auto-generated />
using System;
using CoreTpl.Dao.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CoreTpl.Dao.Migrations
{
    [DbContext(typeof(TplDbContext))]
    [Migration("20200210090223_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CoreTpl.Dao.Database.RoleInfo", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AllowActList")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifyBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RemarkText")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("RoleName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UseStatus")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("RoleId");

                    b.ToTable("RoleInfo");
                });

            modelBuilder.Entity("CoreTpl.Dao.Database.UserInfo", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("AllowActList")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DenyActList")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Department")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ExtensionNum")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<int>("ModifyBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("RemarkText")
                        .HasColumnType("character varying(2048)")
                        .HasMaxLength(2048);

                    b.Property<string>("UseStatus")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserTitle")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("UserId");

                    b.HasIndex("Account");

                    b.HasIndex("UserName");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("CoreTpl.Dao.Database.UserPreference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Name");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreference");
                });

            modelBuilder.Entity("CoreTpl.Dao.Database.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifyBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("CoreTpl.Dao.Database.UserSignInRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Account")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignInIp")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("SignInType")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("StatusCode")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("StatusMsg")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("SignInIp");

                    b.HasIndex("StatusCode");

                    b.ToTable("UserSignInRecord");
                });

            modelBuilder.Entity("CoreTpl.Dao.Database.UserRole", b =>
                {
                    b.HasOne("CoreTpl.Dao.Database.RoleInfo", "RoleInfo")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreTpl.Dao.Database.UserInfo", "UserInfo")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
